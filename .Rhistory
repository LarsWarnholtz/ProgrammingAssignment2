## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- inv(data, ...)
x$setInverse(inverse)
inverse
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(!is.null(inverse)) {
## message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- inv(data, ...)
x$setInverse(inverse)
inverse
}
# create a 10x10 matrix
mat <- makeCacheMatrix(matrix(rnorm(100), c(10,10)))
stopifnot(!is.null(mat$get()))
print("get() Works")
mat$set(matrix(rnorm(10000), c(100,100)))
stopifnot(dim(mat$get()) == c(100,100))
print("set() works")
stopifnot(is.null(mat$getinverse()))
print("inverse is correctly null")
# calculating and caching inverse
cacheSolve(mat)
stopifnot(!is.null(mat$getinverse()))
print("cachesolve seems to work")
print("If the next print occurs immediately, then caching is working")
for(i in 1:10000) {
cacheSolve(mat)
}
stopifnot(!is.null(mat$getinverse()))
print("Called cacheSolve() 10,000 times")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inv) inverse <<- inv
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
## message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- inv(data, ...)
x$setinverse(inverse)
inverse
}
# create a 10x10 matrix
mat <- makeCacheMatrix(matrix(rnorm(100), c(10,10)))
stopifnot(!is.null(mat$get()))
print("get() Works")
mat$set(matrix(rnorm(10000), c(100,100)))
stopifnot(dim(mat$get()) == c(100,100))
print("set() works")
stopifnot(is.null(mat$getinverse()))
print("inverse is correctly null")
# calculating and caching inverse
cacheSolve(mat)
stopifnot(!is.null(mat$getinverse()))
print("cachesolve seems to work")
print("If the next print occurs immediately, then caching is working")
for(i in 1:10000) {
cacheSolve(mat)
}
stopifnot(!is.null(mat$getinverse()))
print("Called cacheSolve() 10,000 times")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inv) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
## message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
}
# create a 10x10 matrix
mat <- makeCacheMatrix(matrix(rnorm(100), c(10,10)))
stopifnot(!is.null(mat$get()))
print("get() Works")
mat$set(matrix(rnorm(10000), c(100,100)))
stopifnot(dim(mat$get()) == c(100,100))
print("set() works")
stopifnot(is.null(mat$getinverse()))
print("inverse is correctly null")
# calculating and caching inverse
cacheSolve(mat)
stopifnot(!is.null(mat$getinverse()))
print("cachesolve seems to work")
print("If the next print occurs immediately, then caching is working")
for(i in 1:10000) {
cacheSolve(mat)
}
stopifnot(!is.null(mat$getinverse()))
print("Called cacheSolve() 10,000 times")
# create a 10x10 matrix
mat <- makeCacheMatrix(matrix(rnorm(100), c(10,10)))
stopifnot(!is.null(mat$get()))
print("get() Works")
mat$set(matrix(rnorm(10000), c(100,100)))
stopifnot(dim(mat$get()) == c(100,100))
print("set() works")
stopifnot(is.null(mat$getinverse()))
print("inverse is correctly null")
# calculating and caching inverse
cacheSolve(mat);
stopifnot(!is.null(mat$getinverse()))
print("cachesolve seems to work")
print("If the next print occurs immediately, then caching is working")
for(i in 1:10000) {
cacheSolve(mat)
}
stopifnot(!is.null(mat$getinverse()))
print("Called cacheSolve() 10,000 times")
# create a 10x10 matrix
mat <- makeCacheMatrix(matrix(rnorm(100), c(10,10)))
stopifnot(!is.null(mat$get()))
print("get() Works")
mat$set(matrix(rnorm(10000), c(100,100)));
stopifnot(dim(mat$get()) == c(100,100))
print("set() works")
stopifnot(is.null(mat$getinverse()))
print("inverse is correctly null")
# calculating and caching inverse
cacheSolve(mat);
stopifnot(!is.null(mat$getinverse()))
print("cachesolve seems to work")
print("If the next print occurs immediately, then caching is working")
for(i in 1:10000) {
cacheSolve(mat)
}
stopifnot(!is.null(mat$getinverse()))
print("Called cacheSolve() 10,000 times")
makeCacheMatrix([1,2;3,4])
makeCacheMatrix(matrix(1,2;3,4)
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
B = matrix( c(2, 4, 3, 1, 5, 7),  nrow=3,  ncol=2)
B
makeCacheMatrix(B)
cacheSolve(B)
B
solve(B)
A = matrix(c(1,2,3,4), ncol = 2, nrow = 2)
A
solve(A)
cacheSolve(A)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
a$get()
a
A
A$get()
a = makeCacheMatrix(c(1,2,3,4), ncol=2, nrow=2)
a = makeCacheMatrix(matrix(c(1,2,3,4), ncol=2, nrow=2))
a
cacheSolve(a)
